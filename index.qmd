---
title: "Diphtheria Slideck Update, 2025"
author: "muiangaj@who.int"
format:
  html:
    toc: true
    theme: flatly           
    code-fold: true
    code-summary: "Show code"
    code-tools: false
    code-block-bg: true
    css: styles.css
    page-layout: full          # ‚Üê makes the report use full browser width
editor: visual
execute:
  echo: false
  warning: false
  message: false
---

```{r}
#| label: setup
#| include: false
library(pacman)
pacman::p_load(
  lubridate, rio, here, scales, janitor, skimr, aweek, incidence2,
  stringr, forcats, purrr, gtExtras, gt, RColorBrewer, plotly,
  i2extras, tidyverse, glue, svglite 
)

```

```{r}
# Load
linelist <- import(here("data/diphtheria_linelist_AFRO.xlsx"))

# Clean + make ISO Monday 'epiweek' dates
linelist_clean <- linelist %>%
  clean_names() %>%
  distinct() %>%
  mutate(
    epiweek = ymd(paste0(year, "-01-01")) + weeks(week_number - 1) -
              days(wday(ymd(paste0(year, "-01-04")), week_start = 1) - 1),
    population      = as.numeric(population),
    suspected_cases = as.numeric(suspected_cases),
    deaths          = as.numeric(deaths)
  ) %>%
  select(country, province_name, district_name, population,
         suspected_cases, deaths, epiweek)

# Aggregate to country-week; keep BOTH cases and deaths
country_summary <- linelist_clean %>%
  filter(epiweek > as.Date("2024-12-28")) %>%
  group_by(country, epiweek) %>%
  summarise(
    suspected_cases = sum(suspected_cases, na.rm = TRUE),
    deaths          = sum(deaths,           na.rm = TRUE),
    .groups = "drop"
  ) %>%
    mutate(epiweek = floor_date(epiweek, "week", week_start = 1))



```

```{r}
# Generate weekly Monday breaks
weekly_breaks <- seq.Date(
  from = floor_date(min(country_summary$epiweek, na.rm = TRUE), "week", week_start = 1),
  to   = ceiling_date(max(country_summary$epiweek, na.rm = TRUE), "week", week_start = 1),
  by   = "week"
)

# Custom label function: show day always, month only on first week of each month
month_labels <- function(x) {
  days   <- format(x, "%d")
  months <- format(x, "%b")

  # Identify which dates are the first Monday of a new month
  is_new_month <- c(TRUE, months[-1] != months[-length(months)])

  # Print month only when new month starts
  out <- ifelse(is_new_month, paste0(days, "\n", months), days)
  return(out)
}

```

# Regional Diphtheria Cases by Week

1 January 2025 to 3 October 2025

```{r}
# (optional) fixed palette (will recycle if > 8 countries)
# Define manual colors
country_colors <- c(
  "Mali"  = "#4FB7B3",   # red tone
  "Niger" = "#065084",   # blue tone
  "Other" = "#BAB0AC"    # neutral grey

  )

country_summary <- country_summary %>%
  mutate(
    color_group = case_when(
      country == "Mali"  ~ "Mali",
      country == "Niger" ~ "Niger",
      TRUE               ~ "Other"
    )
  )


p_global <- ggplot(
  country_summary,
  aes(
    x = epiweek,
    y = suspected_cases,
    fill = country,
    text = paste0(
      "<b>Week:</b> ", epiweek, "<br>",
      "<b>Country:</b> ", country, "<br>",
      "<b>Cases:</b> ", scales::comma(suspected_cases)
    )
  )
) +
  geom_col(width = 6.9, position = "stack", color = NA) +
  scale_x_date(
    breaks = weekly_breaks,
    labels = month_labels,    # use custom function
    expand = c(0, 0)
  ) +  
  scale_y_continuous(labels = scales::comma, expand = c(0,0)) +
  scale_fill_manual(    values = country_colors, name = NULL) +
  labs(title = NULL,
       x = NULL, y = "Cases", fill = NULL) +
  theme_minimal(base_size = 12) +
  theme(legend.position = "right", 
        axis.text.x = element_text(size = 9),
        panel.grid.minor = element_blank())

ggplotly(p_global, tooltip = "text") %>%
  layout(legend = list(orientation = "h", x = 0, y = -0.2),
         xaxis  = list(tickformat = "%b %d\n%Y"))


```

*Please interpret the data presented here with caution due to reporting delays in several countries, especially fro the most recent weeks. Figures may also vary based on data availability*

<br>

# Weekly Diphtheria cases by Countries

```{r}
build_country_plot <- function(cty) {
  dat <- country_summary %>% filter(country == cty)

  # choose bar color (fallback to "Other")
  bar_col <- if (cty %in% names(country_colors)) unname(country_colors[cty]) else unname(country_colors["Other"])

  plot_ly(
    data = dat,
    x = ~epiweek,
    y = ~suspected_cases,
    type = "bar",
    name = cty,
    marker = list(color = bar_col, line = list(width = 0)),
    hovertemplate = paste(
      "<b>Country:</b> ", cty, "<br>",
      "<b>Week starting:</b> %{x|%Y-%m-%d}<br>",
      "<b>Cases:</b> %{y:,}<extra></extra>"
    )
  ) %>%
    layout(
      # remove default title
      title = list(text = NULL),
      xaxis = list(tickformat = "%d\n %b", title = ""),
      yaxis = list(title = "", rangemode = "tozero"),
      # custom annotation for title at the top
      annotations = list(
        list(
          text = paste0("<b>", cty, "</b>"),
          x = 0.5,  # center
          y = 1.1,  # above plot area
          xref = "paper",
          yref = "paper",
          xanchor = "center",
          yanchor = "bottom",
          showarrow = FALSE,
          font = list(size = 12, color = "#222")
        )
      )
    )
}

plots <- lapply(
  c("Mali", "Niger", setdiff(sort(unique(country_summary$country)), c("Mali", "Niger"))),
  build_country_plot
)

p_facets <- subplot(
  plots,
  nrows = ceiling(length(plots) / 2),
  shareX = FALSE, shareY = FALSE,
  margin = 0.04, which_layout = "grid"
) %>%
  layout(showlegend = FALSE)

p_facets


```

*Spikes in case counts due to batch reporting and retrospective adjustments*

<br><br>

# Summary Outbreak Indicators, 2025

-   In 2025, as of 03 October, the African Region has reported 1,940 cases and 128 deaths across 2 countries.
-   In the last 28 days, 256 new cases were reported, reflecting a decrease of about 55% compared to the previous 28-day period.
-   In the last month, Mali (40), Niger (216) accounted for 70% of the regional cases.
-   The region CFR for this period is 5.5%, with Niger exceeding the emergency threshold of 1%

```{r}
region_name <- "AFRO"

last_end   <- max(country_summary$epiweek, na.rm = TRUE)
last_start <- last_end - lubridate::days(27)
prev_start <- last_start - lubridate::days(28)
prev_end   <- last_start - lubridate::days(1)
this_year  <- lubridate::year(last_end)

# Weekly series for sparklines (cases only)
df_weekly <- country_summary %>%
  mutate(week = floor_date(epiweek, "week", week_start = 1)) %>%
  filter(lubridate::year(week) == this_year) %>%
  group_by(country, week) %>%
  summarise(weekly_cases = sum(suspected_cases, na.rm = TRUE), .groups = "drop")

wk_series <- df_weekly %>%
  arrange(country, week) %>%
  group_by(country) %>%
  summarise(wk_cases = list(as.numeric(weekly_cases)), .groups = "drop")

# Country metrics (YTD + 28d windows)
by_country <- country_summary %>%
  filter(lubridate::year(epiweek) == this_year) %>%
  group_by(country) %>%
  summarise(
    total_cases_yr   = sum(suspected_cases, na.rm = TRUE),
    total_deaths_yr  = sum(deaths,          na.rm = TRUE),
    cases_28d        = sum(suspected_cases[epiweek >= last_start & epiweek <= last_end],  na.rm = TRUE),
    deaths_28d       = sum(deaths[epiweek >= last_start & epiweek <= last_end],          na.rm = TRUE),
    cases_prev_28d   = sum(suspected_cases[epiweek >= prev_start & epiweek <= prev_end], na.rm = TRUE),
    deaths_prev_28d  = sum(deaths[epiweek >= prev_start & epiweek <= prev_end],          na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(
    cfr_28d = if_else(cases_28d > 0, 100 * deaths_28d / cases_28d, 0),
    monthly_cases_chg  = if_else(cases_prev_28d  > 0, 100 * (cases_28d  - cases_prev_28d)  / cases_prev_28d,  NA_real_),
    monthly_deaths_chg = if_else(deaths_prev_28d > 0, 100 * (deaths_28d - deaths_prev_28d) / deaths_prev_28d, NA_real_)
  ) %>%
  left_join(wk_series, by = "country")

totals_row <- by_country %>%
  summarise(
    country           = "Total",
    total_cases_yr    = sum(total_cases_yr,  na.rm = TRUE),
    total_deaths_yr   = sum(total_deaths_yr, na.rm = TRUE),
    cases_28d         = sum(cases_28d,       na.rm = TRUE),
    deaths_28d        = sum(deaths_28d,      na.rm = TRUE),
    cases_prev_28d    = sum(cases_prev_28d,  na.rm = TRUE),
    deaths_prev_28d   = sum(deaths_prev_28d, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(
    cfr_28d = if_else(cases_28d > 0, 100 * deaths_28d / cases_28d, 0),
    monthly_cases_chg  = if_else(cases_prev_28d  > 0, 100 * (cases_28d  - cases_prev_28d)  / cases_prev_28d,  NA_real_),
    monthly_deaths_chg = if_else(deaths_prev_28d > 0, 100 * (deaths_28d - deaths_prev_28d) / deaths_prev_28d, NA_real_),
    wk_cases = list(NA_real_)
  )

tbl_data <- bind_rows(by_country, totals_row) %>%
  select(-cases_prev_28d, -deaths_prev_28d)

title_txt    <- sprintf("Summary of Outbreak Indicators for %d: %s", this_year, region_name)
subtitle_txt <- "Last 28 days"
source_txt   <- "Data Source: World Health Organization African Region / DPC"

tbl <- tbl_data %>%
  gt(rowname_col = "country") %>%
  tab_header(title = md(glue("**{title_txt}**")), subtitle = md(subtitle_txt)) %>%
  cols_label(
    total_cases_yr   = md("Total Cases<br/>(2025)"),
    total_deaths_yr  = md("Total Deaths<br/>(2025)"),
    cases_28d        = md("Cases<br/>(Last 28d)"),
    deaths_28d       = md("Deaths<br/>(Last 28d)"),
    wk_cases         = md("Weekly Cases<br/>(2025)"),
    cfr_28d          = md("CFR<br/>(28d, %)"),
    monthly_cases_chg  = md("Monthly Cases<br/>Change (%)"),
    monthly_deaths_chg = md("Monthly Deaths<br/>Change (%)")
  ) %>%
  gtExtras::gt_plt_sparkline(wk_cases, same_limit = TRUE, type = "default") %>%
  fmt_integer(columns = c(total_cases_yr, total_deaths_yr, cases_28d, deaths_28d)) %>%
  fmt_number(columns = c(cfr_28d, monthly_cases_chg, monthly_deaths_chg), decimals = 1) %>%
  tab_style(
    style = list(cell_fill(color = "#E8F1FF")),
    locations = cells_body(columns = c(monthly_cases_chg, monthly_deaths_chg))
  ) %>%
  tab_style(
    style = list(cell_fill(color = "#FDEDE6")),
    locations = cells_body(columns = wk_cases)
  ) %>%
  tab_style(
    style = list(cell_text(weight = "bold")),
    locations = list(
      cells_body(rows = country == "Total"),
      cells_stub(rows = country == "Total")
    )
  ) %>%
  tab_source_note(source_txt) %>%
  tab_options(
    table.font.size = px(11),
    data_row.padding = px(8),
    source_notes.font.size = px(11),
    column_labels.font.weight = "bold"
  )

tbl

```

*Please interpret the data presented here with caution due the reporting delays in several countries, especially for the most recent weeks. Figures may also vary based on data availability* <br><br>

# Mortality by Country

```{r}
# Compute Case Fatality Rate (CFR%) 
df_summary <- linelist_clean %>% 
  group_by(country) %>% 
  summarise(cases = sum(suspected_cases, na.rm = T), deaths = sum(deaths, na.rm = T)) %>% 
  mutate( CFR = 100 * deaths / cases ) 

# Optional: define color palette by WHO Region 
pal <- c("AFRO" = "#F4A582", "EMRO" = "#92C5DE") 

# Plot 
ggplot(df_summary, aes(x = CFR, y = deaths, size = cases, fill = country)) + 
  geom_point(alpha = 0.6, shape = 21, color = "white") + 
  geom_vline(xintercept = 1, linetype = "dotted", color = "red") + 
  geom_text( aes(label = country), hjust = 0.5, vjust = -1, size = 3.2 ) + 
  #scale_fill_manual(values = pal) + 
  scale_size_continuous( range = c(3, 18), labels = comma, name = "Total Cases" ) + 
  scale_x_continuous(labels = label_number(suffix = "%", accuracy = 0.1)) + 
  scale_y_continuous(labels = comma) + 
  labs( title = "Case Fatality Rate vs Deaths by Country", x = "Case Fatality Rate (CFR %)", y = "Number of Deaths", fill = "WHO Region" ) + 
  theme_minimal(base_size = 12) + 
  theme( legend.position = "right", 
         panel.grid.minor = element_blank(), 
         plot.title = element_text(face = "bold") )

```

*As many countries report only total deaths, CFR is calculated using all reported deaths, GTFCC recommends calculating CFR from facility deaths only, with community deaths reported separately. Please note that this plot only includes countries reporting at least 100 cases in the last eight weeks.*
